import asyncio

from aiogram import Dispatcher

from Whisper import WhisperRecognizer
from stt import AsyncSTT
from create_bot import bot
from keyboards import ikb_client_main, ikb_client_start
from aiogram.types import InputMedia
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
import os
from pathlib import Path
import concurrent.futures
from data_base import sqlite_db


dp= Dispatcher(bot)

# whisper = WhisperRecognizer()
from transcriber import Transcriber

transcriber = Transcriber(model_dir_path="models/vosk/modelSmall")

template = """\
–ü–°–°–ú–ü:
–ù–æ–º–µ—Ä –±—Ä–∏–≥–∞–¥—ã:
–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤—ã–∑–æ–≤–∞:
–ê–¥—Ä–µ—Å –º–µ—Å—Ç–∞ –≤—ã–∑–æ–≤–∞:
–ü–æ–ª –∏ –≤–æ–∑—Ä–∞—Å—Ç –±–æ–ª—å–Ω–æ–≥–æ:
–î–∏–∞–≥–Ω–æ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π:
–û–±—â–∞—è —Ç—è–∂–µ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è:
–£—Ä–æ–≤–µ–Ω—å —Å–æ–∑–Ω–∞–Ω–∏—è –ø–æ –®–ö–ì:
–ß–°–°:
–ê–î:
–ß–î–î:
SpO2:
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞:
–ü—Ä–æ–ø–∏—Å–∫–∞:
–¢–µ–ª–µ—Ñ–æ–Ω –±—Ä–∏–≥–∞–¥—ã:
–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é
"""

dicti = {"id":0}

content_type_mapping = {
    types.ContentType.VOICE: 'voice',
    types.ContentType.AUDIO: 'audio',
    types.ContentType.DOCUMENT: 'document',
}

class FSMHospitalization(StatesGroup):
    substation = State()
    teamNumber = State()
    cardNumber = State()
    # address = State()
    # genderAndAge = State()
    # diagnosis = State()
    # overallConditionSeverity = State()
    # levelOfConsciousness = State()
    # heartRate = State()
    # bloodPressur = State()
    # respiratoryRate  = State()
    # oxygenSaturation  = State()
    # bodyTemperature = State()
    # address = State()
    crewPhone = State()

welcome_message = """\
üè• <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ InfoMedAssistBot!</b> üè•

üìö –Ø - –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—Ä–∞—á–µ–π —Å–∫–æ—Ä–æ–π –ø–æ–º–æ—â–∏. üìë

üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –ø–æ–º–æ—â—å. ü§ñ

üåü –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã! üåü
"""

async def command_start(message: types.Message):
    await bot.send_photo(chat_id=message.chat.id, photo="https://wampi.ru/image/Yd23mnl", caption=welcome_message, reply_markup=ikb_client_start)


# async def hospitalization_command(message: types.Message):
#     await FSMHospitalization.substation.set()
#     await message.answer('–í–≤–µ–¥–∏ –ü–°–°–ú–ü')
#
# @dp.message_handler(content_types=[''])
# async def load_substation(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['substation'] = message.


async def start_page(callback: types.CallbackQuery):
     file = InputMedia(media="https://wampi.ru/image/Yd23mnl", caption=welcome_message)
     await callback.message.edit_media(file, reply_markup=ikb_client_start)
     await callback.answer()

async def main_page(callback: types.CallbackQuery):
     await FSMHospitalization.substation.set()
     result = template.replace("–ü–°–°–ú–ü:", "<b>–ü–°–°–ú–ü:</b>")
     file = InputMedia(media="https://postimg.cc/WF6GZYbV", caption=result)
     await callback.message.edit_media(file, reply_markup=ikb_client_main)
     dicti[callback.message.chat.id] = callback.message.message_id
     await callback.answer()


async def algorithms_command(message: types.Message):
    #await message.delete()
    await message.answer('–ê–ª–≥–æ—Ä–∏—Ç–º—ã –ú–û–°–°–ú–ü')#, reply_markup=ReplyKeyboardRemove())



async def load_substation(message: types.Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    async with state.proxy() as data:
        data['substation'] = message.text
    await FSMHospitalization.next()
    result = template.replace("–ü–°–°–ú–ü:", "–ü–°–°–ú–ü: " + message.text)
    result = result.replace("–ù–æ–º–µ—Ä –±—Ä–∏–≥–∞–¥—ã:", "<b>–ù–æ–º–µ—Ä –±—Ä–∏–≥–∞–¥—ã:</b>")
    file = InputMedia(media="https://postimg.cc/0rHQngXN", caption=result)
    try:
        await bot.edit_message_media(media=file,chat_id=message.chat.id,message_id=dicti[message.chat.id], reply_markup=ikb_client_main)
    except:
        pass


async def load_teamNumber(message: types.Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    async with state.proxy() as data:
        data['teamNumber'] = message.text
    await FSMHospitalization.next()
    result = template.replace("–ù–æ–º–µ—Ä –±—Ä–∏–≥–∞–¥—ã:", "–ù–æ–º–µ—Ä –±—Ä–∏–≥–∞–¥—ã: " + message.text)
    result = result.replace("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤—ã–∑–æ–≤–∞:", "<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤—ã–∑–æ–≤–∞:</b>")
    file = InputMedia(media="https://postimg.cc/GHmbZXN5", caption=result)
    try:
        await bot.edit_message_media(media=file,chat_id=message.chat.id,message_id=dicti[message.chat.id], reply_markup=ikb_client_main)
    except:
        pass
    


        

# async def echo_bot(message: types.Message):
#     await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
#     text = message.text
#     result = template.replace("–ê–î–†–ï–°", "–ê–î–†–ï–°: " + text)
#     file = InputMedia(media="https://wampi.ru/image/Yd23mnl", caption=result)
#     try:
#         await bot.edit_message_media(media=file,chat_id=message.chat.id,message_id=dicti[message.chat.id], reply_markup=ikb_client_main)
#     except:
#         pass
    # await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-1)
    # await bot.send_photo(chat_id=message.chat.id, photo="https://wampi.ru/image/Yd23mnl", caption=text, reply_markup=ikb_client_start)
    # await message.delete()
    # text = message.text
    # parts = text.split(":")
    # result = parts[1].strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Ñ—Ä–∞–∑—ã
    # await message.answer(result)

async def speach_to_text(file_id):
    file = await bot.get_file(file_id)
    file_path = file.file_path
    file_on_disk = Path("", f"{file_id}.tmp")
    await bot.download_file(file_path, destination=file_on_disk)
    with concurrent.futures.ThreadPoolExecutor() as executor:
        text = await asyncio.to_thread(transcriber.pool_worker, file_on_disk)
    os.remove(file_on_disk)
    return text

async def voice_message(message: types.Message):
    await message.delete()
    if message.content_type in content_type_mapping:
        file_id = getattr(message, content_type_mapping[message.content_type]).file_id
    else:
        await message.reply("–§–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –æ–±—ä–µ–∫—Ç
    decryption_message = await message.answer(f"–ü–°–°–ú–ü: <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞</b>")

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Event
    decryption_event = asyncio.Event()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫
    asyncio.create_task(add_dots_periodically(decryption_message, decryption_event))

    result = await speach_to_text(file_id)
    result = result.capitalize()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Event, —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å —Ü–∏–∫–ª add_dots_periodically
    decryption_event.set()

    # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞" –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    await decryption_message.edit_text(
        f"<b>–ü–°–°–ú–ü:</b> {result}",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                    switch_inline_query_current_chat=f"\n\n‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n{result}",
                )
            ]
        ])
    )

async def add_dots_periodically(decryption_message, decryption_event):
    dots = 0
    while not decryption_event.is_set():
        dots = (dots + 1) % 4
        await decryption_message.edit_text(f"–ü–°–°–ú–ü: <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞</b>" + "<b>.</b>" * dots)
        await asyncio.sleep(1)
    # file = await bot.get_file(file_id)
    # file_path = file.file_path
    # file_on_disk = Path("", f"{file_id}.tmp")
    # await bot.download_file(file_path, destination=file_on_disk)
    # await message.reply("–ê—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–æ")
    # with concurrent.futures.ThreadPoolExecutor() as executor:
    #     text = await asyncio.to_thread(transcriber.pool_worker, file_on_disk)
    # # text = await asyncio.get_event_loop().run_in_executor(None, transcriber.pool_worker, file_on_disk)
    # # print(text)
    # await message.answer(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")
    # # stt_instance = AsyncSTT()
    # # text = await stt_instance.audio_to_text(file_on_disk)
    # # await message.answer(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")
    # elapsed = time.time() - start_time
    # print(elapsed)
    # os.remove(file_on_disk)






def register_handler_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help'])
    # dp.register_message_handler(hospitalization_command, Text(equals="üè• –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é", ignore_case=True), state=None)
    # dp.register_message_handler(test_command, content_types=['voice'])
    dp.register_message_handler(load_substation, state=FSMHospitalization.substation)
    dp.register_message_handler(load_teamNumber, state=FSMHospitalization.teamNumber)
    dp.register_message_handler(voice_message, content_types=[
    types.ContentType.VOICE,
    types.ContentType.AUDIO,
    types.ContentType.DOCUMENT
    ])
    dp.register_message_handler(algorithms_command, Text(equals="üß† –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–æ—Å—Å–º–ø", ignore_case=True))
    dp.register_callback_query_handler(main_page, Text(equals="main_page", ignore_case=True), state=None)
    dp.register_callback_query_handler(start_page, Text(equals="start_page", ignore_case=True))